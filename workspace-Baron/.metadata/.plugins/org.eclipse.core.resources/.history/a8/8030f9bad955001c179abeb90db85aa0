package fr.mickaelbaron.jaxrstutorialexercice2;

import java.util.List;
import java.util.Optional;

import javax.ws.rs.DELETE;
import javax.ws.rs.GET;
import javax.ws.rs.NotFoundException;
import javax.ws.rs.POST;
import javax.ws.rs.PathParam;

public class TrainBookingResource {

    // TODO: préciser le verbe HTTP.
	@POST
    public TrainBooking createTrainBooking(TrainBooking trainBooking) {
        System.out.println("TrainBookingResource.createTrainBooking()");

        Optional<Train> findFirst = TrainBookingDB.getTrainById(trainBooking.getTrainId());

        if (!findFirst.isPresent()) {
             // TODO: déclencher une exception avec un statut NOT_FOUND.
        	throw new NotFoundException() ;
        }

        TrainBooking newBookTrain = new TrainBooking();
        newBookTrain.setNumberPlaces(trainBooking.getNumberPlaces());
        newBookTrain.setTrainId(findFirst.get().getId());
        newBookTrain.setId(Long.toString(System.currentTimeMillis()));

        TrainBookingDB.getTrainBookings().add(newBookTrain);

        return newBookTrain;
    }

    // TODO: préciser le verbe HTTP.
	@GET
    public List<TrainBooking> getTrainBookings() {
        System.out.println("TrainBookingResource.getTrainBookings()");

        return TrainBookingDB.getTrainBookings();
    }

    // TODO: préciser le verbe HTTP.
	@GET
    // TODO: template paramètre désignant l'identifiant du train.
    public TrainBooking getTrainBooking(@PathParam("id") String trainBookingId) {
        System.out.println("TrainBookingResource.getTrainBooking()");

        Optional<TrainBooking> findFirst = TrainBookingDB.getTrainBookingById(trainBookingId);

        if (findFirst.isPresent()) {
            return findFirst.get();
        } else {
            // TODO: déclencher une exception avec un statut NOT_FOUND.
        	throw new NotFoundException() ;
        }
    }

    // TODO: préciser le verbe HTTP.
	@DELETE
    // TODO: template paramètre désignant l'identifiant du train.
    public void removeTrainBooking(@PathParam("id") String trainBookingId) {
        System.out.println("TrainBookingResource.removeTrainBooking()");

        Optional<TrainBooking> findFirst = TrainBookingDB.getTrainBookingById(trainBookingId);

        if (findFirst.isPresent()) {
            TrainBookingDB.getTrainBookings().remove(findFirst.get());
        }
    }
}
